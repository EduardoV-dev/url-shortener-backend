openapi: "3.1.0"
info:
  title: "Url Shortener API"
  version: "1.0.0"
  description: >
    API Documentation for Url Shortener Service, provides endpoints to create, retrieve, update and delete short URLs.
  license:
    name: "MIT"
    url: "https://opensource.org/license/mit/"
servers:
  - url: "http://localhost:3000/api" # Replace with your actual server URL or list multiple servers as needed
    description: "Localhost"

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: "Register a new user"
      operationId: "registerUser"
      requestBody:
        description: "User registration details"
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: "Email address of the user"
                password:
                  type: string
                  description: "Password for the user account, should be hashed"
                confirmPassword:
                  type: string
                  description: "Password confirmation, should match the password"
        required: true
      responses:
        201:
          description: "User registered successfully"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/User"
        400:
          description: "Bad Request - Invalid input data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        409:
          description: "Conflict - Email already exists"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /auth/login:
    post:
      tags:
        - auth
      summary: "Login a user"
      operationId: "loginUser"
      requestBody:
        description: "User login credentials"
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: "Email address of the user"
                password:
                  type: string
                  description: "Password for the user account"
        required: true
      responses:
        200:
          description: "User logged in successfully"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: object
                        properties:
                          token:
                            type: string
                            description: "JWT token"
        400:
          description: "Bad Request - Invalid input data"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        401:
          description: "Unauthorized - Invalid credentials"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"

  /urls:
    post:
      tags:
        - urls
      summary: "Create a new short URL"
      operationId: "createShortUrl"
      requestBody:
        description: "URL to be shortened"
        content:
          application/json:
            schema:
              type: object
              properties:
                url:
                  type: string
                  format: uri
                  description: "The original URL to be shortened"
        required: true
      responses:
        201:
          description: "Short URL created successfully"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccessResponse"
                  - type: object
                    properties:
                      data:
                        $ref: "#/components/schemas/Url"
        400:
          description: "Bad Request - Invalid URL"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
    get:
      security:
        - bearerAuth: []
      tags:
        - urls
      summary: "Retrieve all short URLs for a user"
      operationId: "getAllShortUrlsByUserId"
      responses:
        200:
          description: "List of all short URLs by user ID"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Url"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /urls/{shortId}:
    delete:
      security:
        - bearerAuth: []
      tags:
        - urls
      summary: "Delete shortened url by using short ID"
      operationId: "deleteShortId"
      parameters:
        - name: shortId
          in: path
          required: true
          description: "Short ID of the URL to delete"
          schema:
            type: string
      responses:
        200:
          description: "URL deleted successfully"
          content:
            application/json:
              schema:
                allOf:
                  - $ref: "#/components/schemas/ApiSuccessResponse"
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: "#/components/schemas/Url"
        403:
          description: "Resource fordidden for deletion"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        404:
          description: "Not Found - Short URL does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
  /urls/redirect/{shortId}:
    get:
      tags:
        - urls
      summary: "Redirect to the original URL using short ID"
      operationId: "redirectToOriginalUrl"
      parameters:
        - name: shortId
          in: path
          required: true
          description: "Short ID of the URL to redirect"
          schema:
            type: string
      responses:
        302:
          description: "Redirects to the original URL"
        404:
          description: "Not Found - Short URL does not exist"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
        500:
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ApiErrorResponse"
components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    ApiErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
          description: "Indicates that the request was not successful"
        message:
          type: string
          example: "Request failed"
          description: "Message describing the error"
        data:
          type: object
          example: null
          description: "Payload for successful response, null in case of error"
        error:
          type: object
          description: "Error details"
    ApiSuccessResponse:
      type: object
      properties:
        success:
          type: boolean
          example: true
          description: "Indicates if the request was successful"
        message:
          type: string
          example: "Request was successful"
          description: "Message describing the result of the request"
        data:
          type: object
          description: "Payload for successful response"
        error:
          type: object
          example: null
          description: "Error details for failed response"
    Url:
      type: object
      properties:
        id:
          description: "Unique identifier for the short URL (UUID)"
          example: "123e4567-e89b-12d3-a456-426614174000"
          type: string
        shortId:
          description: "Short code for the URL"
          example: "abc123"
          type: string
        longUrl:
          description: "Original URL before shortening"
          example: "https://www.example.com/some/long/url"
          type: string
        createdAt:
          description: "Timestamp when the short URL was created"
          example: "2023-10-01T12:00:00Z"
          format: date-time
          type: string
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the URL was updated"
        userId:
          description: "ID of the user who created the short URL, if not defined, anonymous user created it"
          example: "123e4567-e89b-12d3-a456-426614174001"
          nullable: true
          type: string
    User:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the user (UUID)"
        email:
          type: string
          format: email
          description: "Email address of the user"
        password:
          type: string
          description: "Password of the user, should be hashed"
        createdAt:
          type: string
          format: date-time
          description: "Timestamp when the user was created"
        updatedAt:
          type: string
          format: date-time
          description: "Timestamp when the user was updated"
        urls:
          type: array
          items:
            $ref: "#/components/schemas/Url"
          description: "List of URLs created by the user"
